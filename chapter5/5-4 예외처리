오류는 언제 발생하는가?

존재하지 않는 파일을 사용하려고 시도했을 때 발생하는 오류
>>> f = open("나없는파일", 'r')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: '나없는파일'


0으로 다른 숫자를 나누는 경우
>>> 4 / 0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
4를 0으로 나누려고 하니 ZeroDivisionError 오류가 발생

없는 요소
>>> a = [1, 2, 3]
>>> a[3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range


-------------------------------------------------------------

오류 예외 처리 기법

1. try-except 문
try:
    ...
except [발생오류 [as 오류변수]]:          # [] 이 기호는 괄호 안의 내용을 생략할 수 있다는 관례적인 표기법
    ...


  1-1 try-except만 쓰는 방법
try:
    ...
except:
    ...
이 경우에는 오류의 종류에 상관없이 오류가 발생하면 except 블록을 수행


  1-2 발생 오류만 포함한 except 문
try:
    ...
except 발생오류:
    ...
이 경우는 오류가 발생했을 때 except 문에 미리 정해 놓은 오류와 동일한 오류일 경우에만 except 블록을 수행


  1-3 발생 오류와 오류 변수까지 포함한 except 문
try:
    ...
except 발생오류 as 오류변수:
    ...
이 경우는 두 번째 경우에서 오류의 내용까지 알고 싶을 때 사용하는 방법


# try_except.py
try:
    4 / 0
except ZeroDivisionError as e:
    print(e)

division by zero

-------------------------------------------------------------

2. try-finally 문
try 문에는 finally 절을 사용할 수 있다. 
finally 절은 try 문 수행 도중 예외 발생 여부에 상관없이 항상 수행 
보통 finally 절은 사용한 리소스를 close해야 할 때 많이 사용

# try_finally.py
try:
    f = open('foo.txt', 'w')
    # 무언가를 수행한다.

    (... 생략 ...)

finally:
    f.close()  # 중간에 오류가 발생하더라도 무조건 실행된다.
    
foo.txt 파일을 쓰기 모드로 연 후 예외 발생 여부에 상관없이 항상 파일을 닫아 주려면 try-finally 문을 사용

-------------------------------------------------------------
여러개의 오류 처리하기
try 문 안에서 여러 개의 오류를 처리하려면 다음과 같이 사용해야 한다.

try:
    ...
except 발생오류1:
   ... 
except 발생오류2:
   ...

# many_error.py
try:
    a = [1,2]
    print(a[3])
    4/0
except ZeroDivisionError:
    print("0으로 나눌 수 없습니다.")
except IndexError:
    print("인덱싱 할 수 없습니다.")


try:
    a = [1,2]
    print(a[3])
    4/0
except (ZeroDivisionError, IndexError) as e:          # 2개 이상의 오류를 동일하게 처리하기 위해서는 괄호를 사용하여 함께 묶어 처리
    print(e)

-------------------------------------------------------------

try-else 문

try:
    ...
except [발생오류 [as 오류변수]]:
    ...
else:  # 오류가 없을 경우에만 수행
    ...

# try_else.py
try:
    age=int(input('나이를 입력하세요: '))
except:
    print('입력이 정확하지 않습니다.')
else:
    if age <= 18:
        print('미성년자는 출입금지입니다.')
    else:                                      # 오류가 없을 경우에만 else 절이 수행
        print('환영합니다.')

-------------------------------------------------------------

오류 회피하기
특정 오류가 발생할 경우 그냥 통과시켜야 할 때 사용
# error_pass.py
try:
    f = open("나없는파일", 'r')
except FileNotFoundError:            # try 문 안에서 FileNotFoundError가 발생할 경우, pass를 사용하여 오류를 그냥 회피
    pass

-------------------------------------------------------------

오류 일부러 발생시키기
오류를 일부러 발생시켜야 할 경우, raise 명령어를 사용해 오류를 강제로 발생

# error_raise.py
class Bird:
    def fly(self):
        raise NotImplementedError    # NotImplementedError는 파이썬에 이미 정의되어 있는 오류로, 꼭 작성해야 하는 부분이 구현되지 않았을 경우 일부러 오류를 발생시키기 위해 사용


class Eagle(Bird):
    pass

eagle = Eagle()
eagle.fly()
Eagle 클래스는 Bird 클래스를 상속받았다. 그런데 Eagle 클래스는 fly 메서드를 오버라이딩하여 구현하지 않았다. 
따라서 eagle 객체의 fly 메서드를 수행하는 순간 Bird 클래스의 fly 메서드가 수행되어 NotImplementedError가 발생한다.

Traceback (most recent call last):
  File "...", line 33, in <module>
    eagle.fly()
  File "...", line 26, in fly
    raise NotImplementedError
NotImplementedError
상속받는 클래스에서 메서드를 재구현하는 것을 ‘메서드 오버라이딩’이라고 한다.

NotImplementedError가 발생하지 않게 하려면 다음과 같이 Eagle 클래스에 fly 함수를 구현해야 한다.

class Eagle(Bird):
    def fly(self):
        print("very fast")

eagle = Eagle()
eagle.fly()
위 예처럼 fly 함수를 구현한 후 프로그램을 실행하면 오류 없이 다음 문장이 출력된다.

very fast

-------------------------------------------------------------

예외 만들기
프로그램을 수행하다가 특수한 경우에만 예외 처리를 하려고 종종 예외를 만들어서 사용

# error_make.py
class MyError(Exception):        # 예외는 내장 클래스인 Exception 클래스를 상속하여 만
    pass


def say_nick(nick):
    if nick == '바보':
        raise MyError()
    print(nick)

say_nick("천사")
say_nick("바보")

천사
Traceback (most recent call last):
  File "...", line 11, in <module>
    say_nick("바보")
  File "...", line 7, in say_nick
    raise MyError()
__main__.MyError
