모듈 : 함수나 변수 또는 클래스를 모아 놓은 파이썬 파일, 다른 파이썬 프로그램에서 불러와 사용할 수 있도록 만든 파이썬 파일


모듈 만들기

mod1.py
def add(a, b):
    return a + b

def sub(a, b): 
    return a-b

----------------------------------------------------------------
모듈 불러오기

명령프롬프트에서 실행

C:\doit>python
Python 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mod1
>>> print(mod1.add(3,4))
7
>>> print(mod1.sub(4,2))
2
>>>

import 사용방법
import 모듈_이름(.py 확장자를 제거한 mod1만 사용)

from 모듈_이름 import 모듈_함수(함수를 직접 import하면 모듈 이름을 붙이지 않고 바로 해당 모듈의 함수 사용가능)
>>> from mod1 import add
>>> add(3,4)
7

from mod1 import add, sub
쉼표(,)로 구분하여 필요한 함수를 불러옴

from mod1 import * 
mod1 모듈의 모든 함수를 불러와 사용

----------------------------------------------------------------

if __name__ == "__main__":의 의미

#mod1.py
def add(a, b): 
    return a+b

def sub(a, b): 
    return a-b

C:\doit>mod1.py
5
2

C:\doit>python
Python 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mod1
5
2
mod1.py 파일의 add와 sub 함수만 사용하려고 했는데 import mod1을 수행하는 순간 mod1.py 파일이 실행되어 결과를 출력


#mod1.py
def add(a, b): 
    return a+b

def sub(a, b): 
    return a-b

if __name__== "__main__":
    print(add(1, 4))
    print(sub(4, 2))

if __name__ == "__main__"을 사용하면 C:\doit>python mod1.py처럼 직접 이 파일을 실행했을 때는__name__ == "__main__"이 참이 되어 if 문 다음 문장이 수행된다. 
이와 반대로 대화형 인터프리터나 다른 파일에서 이 모듈을 불러 사용할 때는 __name__ == "__main__"이 거짓이 되어 if 문 다음 문장이 수행되지 않는다

>>> import mod1
>>>

__name__ 변수란?
파이썬의 __name__ 변수는 파이썬이 내부적으로 사용하는 특별한 변수 이름이다. 
만약 C:\doit>python mod1.py처럼 직접 mod1.py 파일을 실행할 경우, mod1.py의 __name__ 변수에는 __main__ 값이 저장된다. 
하지만 파이썬 셸이나 다른 파이썬 모듈에서 mod1을 import할 경우에는 mod1.py의 __name__ 변수에 mod1.py의 모듈 이름인 mod1이 저장된다.

>>> import mod1
>>> mod1.__name__
'mod1'

----------------------------------------------------------------

클래스나 변수 등을 포함한 모듈

#mod2.py
PI = 3.141592

class Math: 
    def solv(self, r): 
        return PI * (r ** 2) 

def add(a, b): 
    return a+b


>>> import mod2
>>> mod2.PI
3.141592
>>> a=mod2.Math()        # Math클래스 사용
>>> a.solv(2)
12.566368
>>> mod2.add(mod2.PI, 4.4)        # add 함수 사용
7.5415920000000005

----------------------------------------------------------------

다른 파일에서 모듈 불러오기

# modtest.py
import mod2
result = mod2.add(3, 4)
print(result)

>>> import modtest
7

----------------------------------------------------------------

다른 디렉토리에 있는 모듈 불러오기

해당 모듈이 있는 디렉터리로 이동한 후에야 그 모듈을 사용할 수 있었다. 
이번에는 모듈을 저장한 디렉터리로 이동하지 않고 모듈을 불러와서 사용하는 방법에 대해 알아보자

파일 이동
C:\doit>move mod2.py mymod
        1개 파일을 이동했습니다.

1. sys.path.append 사용하기
파이썬 셸실행후 sys 모듈 불러오기
C:\doit>python
Python 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>>

sys 모듈은 파이썬을 설치할 때 함께 설치되는 라이브러리 모듈이다. 
이 sys 모듈을 사용하면 파이썬 라이브러리가 설치되어 있는 디렉터리를 확인할 수 있다.

>>> sys.path
['', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python311.zip', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\DLLs', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages']

ys.path는 파이썬 라이브러리가 설치되어 있는 디렉터리 목록을 보여 준다. 
이 디렉터리 안에 저장된 파이썬 모듈은 모듈이 저장된 디렉터리로 이동할 필요 없이 바로 불러 사용할 수 있다.
그렇다면 sys.path에 C:\doit\mymod 디렉터리를 추가하면 mymod 디렉터리에 저장된 파이썬 모듈은 아무 곳에서나 불러 사용할 수 있지 않을까? 
sys.path는 리스트이므로 우리는 다음과 같이 할 수 있다.

>>> sys.path.append("C:/doit/mymod")
>>> sys.path
['', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\python311.zip', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\DLLs', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311', 'C:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages', 'C:/doit/mymod']

sys.path.append를 사용해서 C:/doit/mymod라는 디렉터리를 sys.path에 추가했다. 
그리고 다시 sys.path를 출력해 보니 가장 마지막에 C:/doit/mymod 디렉터리가 추가되었다.

>>> import mod2            # 사용가능해짐
>>> print(mod2.add(3,4))
7


2. PYTHONPATH 환경 변수 사용하기
C:\doit>set PYTHONPATH=C:\doit\mymod
C:\doit>python
Python 3.11.2 (tags/v3.11.2:878ead1, Feb  7 2023, 16:38:35) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mod2
>>> print(mod2.add(3, 4))
7

set 명령어를 사용해 PYTHONPATH 환경 변수에 mod2.py 파일이 있는 C:\doit\mymod 디렉터리를 설정한다. 
그러면 디렉터리 이동이나 별도의 모듈 추가 작업 없이 mymod 디렉터리에 저장된 mod2 모듈을 불러와서 사용할 수 있다.
