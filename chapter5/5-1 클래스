클래스 - 틀
객체 - 틀로 찍어낸 결과물(변수값은 다르나 같은 기능을 가진 클래스를 사용), 클래스의 결과값을 리턴 받은 a와 b가 객체
>>> class cookie:
...     pass
...
>>> a= cookie()
>>> b= cookie()

----------------------------------------------------------

>>> result = 0
>>>
>>> def add(num):
...     global result
...     result += num
...     return result
...
>>> print(add(3))
3
>>> print(add(4))
7

----------------------------------------------------------

>>> result1 = 0
>>> result2 = 0
>>>
>>> def add1(num):  # 계산기1
...     global result1
...     result1 += num
...     return result1
...
>>> def add2(num):  # 계산기2
...     global result2
...     result2 += num
...     return result2
...
>>> print(add1(3))
3
>>> print(add1(4))
7
>>> print(add2(3))
3
>>> print(add2(7))
10

----------------------------------------------------------

>>> class Calculator:
...     def __init__(self):
...         self.result = 0
...     def add(self, num):
...         self.result += num
...         return self.result
...
>>> cal1 = Calculator()    #객체1
>>> cal2 = Calculator()    #객체2
>>>
>>> print(cal1.add(3))
3
>>> print(cal1.add(4))
7
>>> print(cal2.add(3))
3
>>> print(cal2.add(7))
10

----------------------------------------------------------

클래스 구조 만들기

>>> class FourCal:
...     pass
...
>>> a = FourCal()
>>> type(a)        #type은 파이썬이 자체로 가지고 있는 내장 함수로, 객체의 타입을 출력
<class '__main__.FourCal'>

----------------------------------------------------------

객체에 연산할 숫자 지정하기

1. setdata 메서듸 매개변수
>>> class FourCal:
...     def setdata(self, first, second):        # 클래스안에 구현된 함수는 method메서드 라고 함
...         self.first = first
...         self.second = second
>>> a = FourCal()
>>> a.setdata(4, 2)

# setdata 메서드에는 self, first, second 총 3개의 매개변수가 필요한데 실제로는 a.setdata(4, 2)처럼 2개의 값만 전달했다.
a.setdata(4, 2)처럼 호출하면 setdata 메서드의 첫 번째 매개변수 self에는 setdata 메서드를 호출한 객체 a가 자동으로 전달되기 때문


2. setdata 메서드의 수행문

>>> class FourCal:
...     def setdata(self, first, second):
...         self.first = first
...         self.second = second
>>> a = FourCal()
>>> a.setdata(4, 2)
>>> a.first
4
>>> a.second
2

>>> a = FourCal()
>>> b = FourCal()
>>> a.setdata(4, 2)
>>> a.first
4
>>> b.setdata(3, 7)
>>> b.first
3


----------------------------------------------------------

더하기 기능 만들기

>>> class FourCal:
...     def setdata(self, first, second):
...         self.first = first
...         self.second = second
...     def add(self):
...         result = self.first + self.second
...         return result
...
>>> a = FourCal()
>>> a.setdata(4, 2)
>>> a.add()
>>> 6

----------------------------------------------------------

곱하기, 빼기, 나누기 기능 만들기

>>> class FourCal:
...     def setdata(self, first, second):
...         self.first = first
...         self.second = second
...     def add(self):
...         result = self.first + self.second
...         return result
...     def mul(self):
...         result = self.first * self.second
...         return result
...     def sub(self):
...         result = self.first - self.second
...         return result
...     def div(self):
...         result = self.first / self.second
...         return result
...
>>> a = FourCal()
>>> b = FourCal()
>>> a.setdata(4, 2)
>>> b.setdata(3, 8)
>>> a.add()
6
>>> a.mul()
8
>>> a.sub()
2
>>> a.div()
2
>>> b.add()
11
>>> b.mul()
24
>>> b.sub()
-5
>>> b.div()
0.375
