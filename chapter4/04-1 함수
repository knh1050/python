def 함수_이름(매개변수):
  수행할_문장1
  수행할_문장2
  ...

----------------------------------------------
>>> def add(a,b):
...     return a+b
...
>>> add(1,3)
4

>>> a=3
>>> b=1
>>> c=add(a,b)
>>> c
4

----------------------------------------------
>>> def add(a,b):         # 정의할때 사용되는 a, b는 매개변수
...     return a+b
...
>>> add(1,3)                # 정의가 끝난 함수에 들어가는 수는 인수

----------------------------------------------

입력값과 리턴값에 따른 함수의 형태

1.일반적인 함수 : 아래와같이 매개변수 자리의 입력값과 return 값이 존재하는 함수
>>> def add(a,b):
...     return a+b

2. 입력값이 없는 함수 : 매개변수 자리에 아무것도 없음
>>> def say():
...     return 'Hi'
...
>>> say()
'Hi'

3. 리턴값이 없는 함수 : return 설정을 안함
>>> def add(a,b):
...     print('%d, %d의 합은 %d' %(a,b, a+b))
...
>>> add(1,3)
1, 3의 합은 4

4. 입력값, 리턴값 없는 함수 : 
>>> def say():
...     print('hi')
...
>>> say()
hi

----------------------------------------------

매개변수를 지정하여 호출하기

>>> def sub(a,b):
...     return a-b
...
>>> result = sub(a=7, b=3)
>>> result
4

>>> result = sub(b=5, a=3)      # 매개 변수 지정시 순서 상관없이 사용 가능
>>> result
-2

----------------------------------------------

입력값이 몇 개가 될지 모를 때는 어떻게 할까?

def 함수이름(*매개변수):
  수행할문장
  ...

여러 개의 입력값을 받는 함수 만들기

>>> def add(*args):
...     result =0
...     for i in args:
...             result=result+i
...     return result
...
>>> result = add(1,2,3)
>>> result
6
>>> result = add(1,2,3,4,5,6,7,8,9,10)
>>> result
55


>>> def add(c, *args):
...     if c == 'add':
...             result =0
...             for i in args:
...                     result = result+i
...     elif c == 'mul':
...             result=1
...             for i in args:
...                     result=result*i
...     return result
...
>>> result = add('add', 1,2,3,4,5,6)
>>> result
21
>>> result=add('mul',1,23,4)
>>> result
92


----------------------------------------------

키워드 매개변수, kwargs

>>> def a(**kwargs):
...     print(kwargs)
...
>>> a(a=1)
{'a': 1}        # 딕셔너리 형식
>>> a(name='foo', age=3)
{'name': 'foo', 'age': 3}
>>>

----------------------------------------------

함수의 리턴값은 언제나 하나이다

>>> def add(a, b):
...     return a+b, a*b
...
>>> result = add(3,4)
>>> result
(7, 12)        # 함수의 리턴값 a+b, a*b는 튜플값 하나인(a+b, a*b)로 반환


>>> def add(a, b):
...     return a+b
...     return a*b
...
>>> result=add(3,4)
>>> result
7              # return a*b 는 실행되지 않음


----------------------------------------------

매개변수에 초깃값 미리 설정하기

>>> def say(n, a, m=True):                    # 매개변수 순서 주의 say(n, m=True, a) 일 경우 say('김남해', 10) 사용하면 에러 발생
...     print('%s' %n)
...     print('%s' %a)
...     if m:
...             print('남자')
...     else:
...             print('여자')
...
>>> say('김남해', 10, 1)
김남해
10
남자

----------------------------------------------

함수 안에서 선언한 변수의 효력 범위

>>> a =1
>>> def v(a):
...     a=a+1
...
>>> v(a)
>>> a
1

----------------------------------------------

함수 안에서 함수 밖의 변수 변경

1. return 사용
>>> a=1
>>> def test(a):
...     a=a+1
...     return a
...
>>> a= test(a)
>>> a
2


2. global 명령어 사용
>>> a=1
>>> def test():
...     global a
...     a=a+2
...
>>> a
1
>>> test()
>>> a
3

----------------------------------------------

lambda 예약어
lambda는 함수를 생성할 때 사용하는 예약어로, def와 동일한 역할을 한다.
보통 함수를 한줄로 간결하게 만들 때 사용.
def를 사용해야할 절도로 복잡하지 않거나 def를 사용할 수 없는 곳에 주로 씀

함수이름 = lambda 매개변수1, 매개변수2 ... : 매개변수를 이용한 표현식

>>> add = lambda a, b: a+b
>>> result = add(1,2)
>>> result
3
