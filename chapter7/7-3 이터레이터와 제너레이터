이터레이터(iterator) : next 함수 호출 시 계속 그다음 값을 리턴하는 객체

>>> a = [1, 2, 3]
>>> ia = iter(a)
>>> type(ia)
<class 'list_iterator'>

-----------------------------------------------

>>> a = [1, 2, 3]
>>> ia = iter(a)
>>> for i in ia:
...     print(i)
... 
1
2
3
>>> for i in ia:
...     print(i)
... 
>>>

-----------------------------------------------

이터레이터 만들기

# iterator.py
class MyItertor:
    def __init__(self, data):
        self.data = data
        self.position = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.position >= len(self.data):
            raise StopIteration
        result = self.data[self.position]
        self.position += 1
        return result

if __name__ == "__main__":
    i = MyItertor([1,2,3])
    for item in i:
        print(item)

1
2
3

-----------------------------------------------

# reviterator.py
class ReverseItertor:
    def __init__(self, data):
        self.data = data
        self.position = len(self.data) -1

    def __iter__(self):
        return self

    def __next__(self):
        if self.position < 0:
            raise StopIteration
        result = self.data[self.position]
        self.position -= 1
        return result

if __name__ == "__main__":
    i = ReverseItertor([1,2,3])
    for item in i:
        print(item)

3
2
1

-----------------------------------------------

제너레이터(generator) : 이터레이터를 생성해 주는 함수. 제너레이터로 생성한 객체는 이터레이터와 마찬가지로 next 함수 호출 시 그 값을 차례대로 얻음. 
제너레이터에서는 차례대로 결과를 반환하고자 return 대신 yield 키워드를 사용.

>>> def mygen():
...     yield 'a'
...     yield 'b'
...     yield 'c'
... 
>>> g = mygen()
>>> type(g)
<class 'generator'>
>>> next(g)
'a'
>>> next(g)
'b'
>>> next(g)
'c'
>>> next(g)        # 더는 리턴할 값이 없으므로 StopIteration 예외가 발생
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration

-----------------------------------------------

제너레이터 표현식

# generator.py
def mygen():
    for i in range(1, 1000):
        result = i * i
        yield result

gen = mygen()

print(next(gen))
print(next(gen))
print(next(gen))

1
4
9

-----------------------------------------------

제너레이터와 이터레이터

class MyIterator:
    def __init__(self):
        self.data = 1

    def __iter__(self):
        return self

    def __next__(self):
        result = self.data * self.data
        self.data += 1
        if self.data >= 1000:
            raise StopIteration
        return result

-----------------------------------------------

제너레이터 활용하기

# generator2.py
import time

def longtime_job():
    print("job start")
    time.sleep(1)  # 1초 지연
    return "done"

list_job = [longtime_job() for i in range(5)]
print(list_job[0])

job start
job start
job start
job start
job start
done
-----------------------------------------------
# generator2.py
import time

def longtime_job():
    print("job start")
    time.sleep(1)
    return "done"

list_job = (longtime_job() for i in range(5))
print(next(list_job))

job start
done

